package com.zs.tixi.class19;

/**
 * 从暴力递归到动态规划（一）
 *
 * 怎么尝试一件事情？
 *      1）有经验但是没有方法论。
 *      2）怎么判断一个尝试就是最优尝试？
 *      3）难道尝试这件事真的只能拼天赋？那我咋搞定我的面试？
 *      4）动态规划是啥？和尝试有什么关系？
 *      从暴力递归到动态规划，解决任何面试中的动态规划问题！
 *
 * 什么暴力递归可以继续优化？
 *      有重复调用同一个子问题的解，这种递归可以优化。
 *      如果每一个子问题都是不同的解，无法优化也不用优化。
 *
 * 暴力递归和动态规划的关系
 *      某一个暴力递归，有重复调用，就可以把这个暴力递归优化为动态规划。
 *      任何动态规划问题，都一定对应着某一个有重复过程的暴力递归。
 *      但不是所有的暴力递归，都一定对应着动态规划。
 *
 * 面试题和动态规划的关系
 *      解决一个问题，可能有很多尝试方法
 *      可能再很多尝试方法中，又有若干个尝试方法有动态规划的方式。
 *      一个问题 可能有 若干动态规划的解法。
 *
 * 如何找到某个问题的动态规划方式？
 *      1）设计暴力递归：重要原则+4中常见模型！重点！
 *      2）分析有没有重复解：套路解决。
 *      3）用记忆化搜索 -> 用严格表结构实现动态规划：套路解决。
 *      4) 看看能否继续优化：套路解决
 *
 * 面试中设计暴力递归过程的原则
 *      1）每一个可变参数的类型，一定不要比int类型更加复杂。
 *      2）原则1）可以违反，让类型突破到一维线性结构，但必须是单一可变参数。
 *      3）如果发现原则1）被违反，但不违反原则2），只需要做到记忆化搜索即可。
 *      4）可变参数的个数，能少则少。
 *
 * 知道了面试中设计暴力递归过程的原则，然后呢？
 *      一定要逼自己找到不违反原则情况下的暴力尝试。
 *      如果你找到的暴力尝试，不符合原则，马上舍弃！找新的！
 *      如果某个题目突破了设计原则，一定极难极难，面试中出现的概率小于5%
 *
 * 常见的四种尝试模型：
 *      1）从左往右的尝试模型。
 *      2）范围上的尝试模型
 *      3）多样本位置全对应的尝试模型
 *      4）寻找业务限制的尝试模型
 *
 * 如何分析有没有重复解：
 *      列出调用过程，可以只列出前几层。
 *      有没有重复解，一看便知。
 *
 * 暴力递归到动态规划的套路
 *      1）你已经有了一个不违反原则的暴力递归，而且的确存在解的重复调用。
 *      2）找到哪些参数的变化会影响返回值，对每一个列出变化范围。
 *      3）参数间的所有组合数量，意味着表的大小。
 *      4）记忆化搜索的方法就是做缓存，非常容易做到。
 *      5）规定好严格位置的表大小，分析位置的依赖顺序，然后从基础填写到最终解。
 *      6）对于有枚举行为的决策过程，进一步优化。
 *
 * 动态规划的进一步优化：
 *      1）空间压缩
 *      2）状态化简
 *      3）四边形不等式
 *      4）其它优化技巧
 *
 * 题目一：
 *      假设有排成一行的N个位置，记为1-N，N一定大于或等于2
 *      开始时机器人在其中的M位置上（M一定是1-N中的一个）
 *      如果机器人来到1位置，那么下一步只能往右来到2位置。
 *      如果机器人来到N位置，那么下一步只能往左来到N-1位置。
 *      如果机器人来到中间位置，那么下一步可以往左走或者往右走。
 *      规定机器人必须走K步，最终能来到P位置，（P也是1-N中的一个）的方法有多少种？
 *      给定四个参数：N, M, K, P， 返回方法数。
 *
 * 题目二：
 *      给定一个整型数组arr，代表数值不同的纸牌排成一条线。
 *      玩家A和玩家B依次拿走每张纸牌。
 *      规定玩家A先拿，玩家B后拿。
 *      但是每个玩家每次只能拿走最左或最右的牌。
 *      玩家A和玩家B都绝顶聪明。
 *      请返回最后获胜者的分数。
 *
 *
 */
public class T {
}
